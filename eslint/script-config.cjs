/* eslint-env node */

module.exports = {
    plugins: ['sonarjs'],
    extends: ['plugin:sonarjs/recommended'],
    rules: {
        'no-console': 'off', // warn
        indent: ['off'],
        quotes: ['error', 'single'],
        semi: ['error', 'always'],
        'line-comment-position': 'off',
        'no-dupe-else-if': 'error',
        'no-duplicate-imports': 'error',
        'no-unused-vars': 'off',
        'no-else-return': 'off',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-empty': 'error',
        'no-extra-semi': 'error',
        'no-global-assign': 'error',
        'no-labels': 'error',
        'no-octal': 'error',
        'no-proto': 'error',
        'no-redeclare': 'error',
        'no-regex-spaces': 'error',
        'no-return-assign': 'error',
        'no-var': 'error',
        'no-useless-return': 'error',
        'no-unneeded-ternary': 'error',
        'no-with': 'error',
        'prefer-const': 'warn',
        yoda: ['error', 'never'],
        'comma-dangle': [
            'warn',
            {
                arrays: 'always-multiline',
                objects: 'always-multiline',
                imports: 'always-multiline',
                exports: 'always-multiline',
            },
        ],
        'comma-spacing': ['warn', {before: false, after: true}],
        'eol-last': ['error', 'always'],
        'func-call-spacing': ['off'],
        'function-call-argument-newline': ['error', 'consistent'],
        'implicit-arrow-linebreak': ['off'],
        'key-spacing': [
            'error',
            {beforeColon: false, afterColon: true, mode: 'strict'},
        ],
        'keyword-spacing': [
            'error',
            {
                overrides: {
                    case: {after: true},
                    catch: {after: true},
                    class: {after: true},
                    const: {after: true},
                    default: {after: true},
                    export: {after: true},
                    extends: {after: true, before: true},
                    finally: {after: true, before: true},
                    from: {after: true, before: true},
                    get: {after: true},
                    do: {after: true},
                    for: {after: true},
                    if: {after: true},
                    import: {after: true},
                    in: {after: true, before: true},
                    let: {after: true},
                    new: {after: true, before: true},
                    of: {after: true, before: true},
                    return: {after: true},
                    static: {after: true},
                    switch: {after: true},
                    try: {after: true},
                    while: {after: true},
                    yield: {after: true},
                },
            },
        ],
        'lines-between-class-members': [
            'error',
            'always',
            {exceptAfterSingleLine: true},
        ],
        'max-len': [
            'error',
            {
                code: 140,
                ignoreStrings: true,
            },
        ],
        'newline-per-chained-call': ['off'],
        'no-multi-spaces': 'warn',
        'no-tabs': 'warn',
        'no-prototype-builtins': ['off'],
        'object-curly-spacing': ['error', 'never'],
        'operator-linebreak': [
            'error',
            'after',
            {
                overrides: {
                    '?': 'before',
                    ':': 'before',
                },
            },
        ],
        'padded-blocks': ['error', 'never'],
        'semi-spacing': ['error', {before: false, after: true}],
        'space-before-blocks': ['error', 'always'],
        'space-before-function-paren': ['off'],
        'space-in-parens': ['error', 'never'],
        'space-infix-ops': 'error',
        'space-unary-ops': [
            'error',
            {
                words: true,
                nonwords: false,
            },
        ],
        'switch-colon-spacing': ['error', {after: true, before: false}],
        'template-curly-spacing': ['error', 'never'],
        'template-tag-spacing': ['error', 'never'],
        'wrap-iife': ['error', 'inside'],
        'sonarjs/cognitive-complexity': ['off'],
        'sonarjs/no-all-duplicated-branches': 'error',
        'sonarjs/no-duplicate-string': 'off',
        'sonarjs/no-element-overwrite': 'error',
        'sonarjs/no-empty-collection': 'error',
        'sonarjs/no-extra-arguments': 'error',
        'sonarjs/no-identical-conditions': 'error',
        'sonarjs/no-identical-expressions': 'error',
        'sonarjs/no-ignored-return': 'error',
        'sonarjs/no-one-iteration-loop': 'error',
        'sonarjs/no-use-of-empty-return-value': 'error',
        'sonarjs/non-existent-operator': 'error',
        'sonarjs/max-switch-cases': ['error', 10],
        'sonarjs/no-collapsible-if': ['error'],
        'sonarjs/no-gratuitous-expressions': ['error'],
        'sonarjs/no-identical-functions': ['error'],
        'sonarjs/no-inverted-boolean-check': ['error'],
        'sonarjs/no-nested-switch': ['error'],
        'sonarjs/no-nested-template-literals': ['error'],
        'sonarjs/no-redundant-boolean': ['error'],
        'sonarjs/no-small-switch': ['error'],
        'sonarjs/no-useless-catch': ['error'],
        'sonarjs/prefer-object-literal': ['error'],
    },
};
